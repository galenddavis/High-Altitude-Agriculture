{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/character.js","webpack:///./src/scripts/plant.js","webpack:///./src/scripts/utilities.js","webpack:///./src/scripts/walls.js","webpack:///./src/scripts/gameBoard.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Character","x","y","size","ctx","this","keys","width","height","plants","position","state","document","addEventListener","event","plant","move","forEach","draw","fillStyle","fillRect","deltaTime","plantInstance","Plant","push","length","plantSizes","require","player","stage","Image","src","plantX","console","log","drawImage","Wall","GameBoard","wall","update","window","canvas","querySelector","getContext","game","time","playGame","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","// const Plant = require('./plant')\nimport Plant from './plant'\nimport plantSizes from './utilities';\n\nclass Character {\n    // constructor(gameWidth, gameHeight, canvas) {\n    //     this.canvas = canvas\n    //     this.ctx = canvas.getContext('2d')\n    //     this.gameWidth = gameWidth;\n    //     this.gameHeight = gameHeight;\n    //     this.width = 40;\n    //     this.height = 40;\n    //     this.plants = [];\n    //     this.position = {\n    //         x: gameWidth / 2 - this.width / 2, \n    //         y: gameHeight / 2 - this.height / 2\n    //     }\n    constructor(x, y, size, ctx) {\n        this.keys = [];\n        this.ctx = ctx\n        this.width = size;\n        this.height = size;\n        this.plants = [];\n        this.position = {\n            x: x, \n            y: y\n        }\n        this.state = 0\n        // this.player = new Image();\n        // this.player.src = 'src/assets/images/player_right.png'\n\n        // Movement\n        document.addEventListener('keydown', event => {\n            this.keys = (this.keys || []);\n            this.keys[event.key] = true;\n\n        })\n\n        // document.addEventListener('keydown', this.move(this.keys))\n\n        document.addEventListener('keyup', event => {\n            this.keys[event.key] = false;\n        })\n\n        // Planting\n        document.addEventListener('keydown', event => {\n            if (event.key === 'e') {\n                for (let i = 0; i < 1; i++){\n                    this.plant();\n                }\n\n            }\n        })\n    }\n\n    draw(ctx) {\n        this.move()\n        this.plants.forEach( plant => {\n            plant.draw(this.ctx)\n        })\n        ctx.fillStyle = 'red'\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height)\n        // ctx.drawImage(this.player, this.position.x, this.position.y, this.height, this.width)\n\n    }\n\n    move(keys) {\n        // switch (this.keys) {\n        //     case 'ArrowUp':\n        //         this.position.y -= 8\n        //         console.log(this.position.y)\n        //         break;\n        //     case 'ArrowDown':\n        //         this.position.y += 8\n        //         break;\n        //     case 'ArrowLeft':\n        //         this.position.y -= 8\n        //         break;\n        //     case 'ArrowRight':\n        //         this.position.y += 8\n        //         break;\n        //     default:\n        //         break;\n        // }\n      \n    }\n\n    update(deltaTime) {\n        if (!deltaTime) return;\n        // this.position.y += 6\n        // this.move()\n        if (this.keys && this.keys['ArrowUp']) {this.position.y -= 5}\n        if (this.keys && this.keys['ArrowDown']) {this.position.y += 5}\n        if (this.keys && this.keys['ArrowLeft']) {\n            // this.state = 1\n            // this.player.src = 'src/assets/images/player_left.png'\n            this.position.x -= 5}\n        if (this.keys && this.keys['ArrowRight']) {\n            // this.state = 0\n            // this.player.src = 'src/assets/images/player_right.png'\n            this.position.x += 5}\n        \n\n        // This keeps the character from moving off the screen. \n        if (this.position.y < 140) this.position.y = 140\n        if (this.position.y + this.height > 760) {\n            this.position.y = 760 - this.height\n        }\n        if (this.position.x < 0) this.position.x = 0\n        if (this.position.x + this.width > 1400) {\n            this.position.x = 1400 - this.width  \n        }\n        \n    }\n\n    plant() {\n        const plantInstance = new Plant(this)\n        this.plants.push(plantInstance)\n        this.plants[this.plants.length - 1].draw(this.ctx)\n           \n    }\n}\n\n\n\n// module.exports = Character\nexport default Character;\n\n","const plantSizes = require('./utilities')\r\nconst Character = require('./character')\r\n\r\nclass Plant {\r\n    constructor(player) {\r\n        this.stage = 0;\r\n        this.height = plantSizes[this.stage]\r\n        this.width = plantSizes[this.stage]\r\n        this.ctx = player.ctx;\r\n        this.player = player;\r\n        this.plant = new Image();\r\n        this.plant.src = 'src/assets/images/plant_lvl_1.png'\r\n\r\n        this.plantX = this.player.state = 1 ? -30 : 35;\r\n        // if (this.player.state = 0) {\r\n        //     this.plantX = 1\r\n        // } else {\r\n        //     this.plantX = -1\r\n        // }\r\n        this.position = {\r\n            x: player.position.x + this.plantX, \r\n            y: player.position.y + 35\r\n        }\r\n    }\r\n    \r\n    draw(ctx) {\r\n        if (this.player.plants.length < 1) return; \r\n        console.log(this.player.state)\r\n        ctx.fillStyle = 'green'\r\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height)\r\n        // ctx.drawImage(this.plant, this.position.x, this.position.y, this.height, this.width)\r\n        // setTimeout(this.grow(), 10000)\r\n    }\r\n\r\n    grow() {\r\n        this.plant.src = 'src/assets/images/plant_lvl_2.png'\r\n        this.ctx.drawImage(this.plant, this.position.x, this.position.y, this.height, this.width)\r\n    }\r\n}\r\n\r\nexport default Plant;","\r\nconst plantSizes = [50, 20, 25]\r\n\r\n\r\nmodule.exports = plantSizes;","\nclass Wall {\n    constructor(height, width, x, y) {\n        this.height = height;\n        this.width = width; \n        this.position = {\n            x: x,\n            y: y\n        };\n        // this.window = new Image();\n        // this.window.src = 'src/assets/images/planet_window.png'\n\n        // 1370, 140, 15, 0)\n     \n    }\n    \n    draw(ctx) {\n        ctx.fillStyle = 'black'\n        ctx.fillRect(this.position.x, this.position.y, this.height, this.width)\n        // ctx.drawImage(this.window, 15, 0, 1370, 140)\n        // ctx.drawImage(this.window, 0, 0, 1400, 140)\n    }\n}\n\nexport default Wall;","import Character from './character'\nimport Plant from './plant';\nimport Wall from './walls';\n\n\nclass GameBoard {\n    constructor(ctx) {\n        this.ctx = ctx\n        this.player = new Character(300, 300, 80, this.ctx);\n        this.wall = new Wall(1370, 140, 15, 0)\n    }\n\n    draw(ctx) {\n        this.wall.draw(ctx)\n        this.player.draw(ctx)\n    }\n\n    update(deltaTime, ctx) {\n        this.player.update(deltaTime)\n        this.draw(ctx)\n    }\n}\n\nexport default GameBoard;\n\n// window.addEventListener('load', () => {\n//     const canvas = document.querySelector('#game-screen');\n//     const ctx = canvas.getContext('2d');\n    \n//     // Set canvas size \n//     canvas.width = 1400 // 35 columns\n//     canvas.height = 760 // 18 rows\n\n//     // const plants = character.plants\n//     const character = new Character(canvas.width, canvas.height, canvas);\n//     let wall1 = new Wall(1370, 120, 15, 0)\n//     // wall2.fillStyle = 'yellow'\n//     let wall2 = new Wall(1370, 120, 15, 0)\n//     // let plant = new Plant()\n   \n//     let time = 0;\n//     function playGame(timestamp) {\n//         ctx.clearRect(0, 0, 1400, 760)\n//         let deltaTime = timestamp - time;\n//         time = timestamp;\n        \n//         // Plant.update(deltaTime);\n//         character.update(deltaTime);\n//         // Wall.draw();\n//         character.draw(ctx)\n//         wall1.draw(ctx);\n//         // wall2.draw(ctx);\n       \n\n//         requestAnimationFrame(playGame);\n//     }\n\n//     playGame();\n\n// })\n\n\n\n\n\n\n\n","import './styles/index.scss';\n// import * as GameBoard from './scripts/gameBoard'\n// import * as Game from './scripts/entry'\n\nimport GameBoard from './scripts/gameBoard'\n\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    const canvas = document.querySelector('#game-screen');\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size \n    canvas.width = 1400 // 35 columns\n    canvas.height = 760 // 18 rows\n\n    const game = new GameBoard(ctx)\n\n    // // const plants = character.plants\n    // const character = new Character(canvas.width, canvas.height, canvas);\n    // let wall1 = new Wall(1370, 120, 15, 0)\n    // // wall2.fillStyle = 'yellow'\n    // let wall2 = new Wall(1370, 120, 15, 0)\n    // // let plant = new Plant()\n   \n    let time = 0;\n    function playGame(timestamp) {\n        ctx.clearRect(0, 0, 1400, 760)\n        let deltaTime = timestamp - time;\n        time = timestamp;\n        // console.log(time)\n        // game.update(deltaTime)\n        game.update(deltaTime, ctx)\n        requestAnimationFrame(playGame);\n    }\n\n    playGame();\n\n})\n"],"sourceRoot":""}